package tick2;

public class LCSBottomUp extends LCSFinder {

	public LCSBottomUp(String s1, String s2) {
		super(s1, s2);
		mTable = new int[s1.length()][s2.length()];
	}

	@Override
	public int getLCSLength() {
		if (mTable == null) {
			return 0;
		}
		return mTable[mString1.length() - 1][mString2.length() - 1];
	}

	@Override
	public String getLCSString() {
		if (mTable == null) {
			return "";
		}
		String lcs = "";
		int i = mString1.length() - 1;
		int j = mString2.length() - 1;

		while (i != 0 || j != 0) {
			if (mTable[i][j] == mTable[i - 1][j]) {
				--i;
			} else if (mTable[i][j] == mTable[i][j - 1]) {
				--j;
			} else {
				lcs += mTable[i][j];
				--i;
				--j;
			}
		}
		return lcs;
	}

	public int[][] getLCSLengthTable() {
		if (mString1 == null || mString2 == null) {
			return null;
		}
		int len1 = mString1.length();
		int len2 = mString2.length();
		if (len1 == 0 || len2 == 0) {
			return null;
		}
		boolean flag = false;
		for (int i = 0; i < len1; ++i) {
			if (flag || mString1.charAt(i) == mString2.charAt(0)) {
				mTable[i][0] = 1;
				flag = true;
			}
		}
		flag = false;
		for (int j = 0; j < len1; ++j) {
			if (flag || mString1.charAt(0) == mString2.charAt(j)) {
				mTable[0][j] = 1;
				flag = true;
			}
		}

		for (int i = 1; i < len1; ++i) {
			for (int j = 1; j < len2; ++j) {
				if (mString1.charAt(i) == mString2.charAt(j)) {
					mTable[i][j] = mTable[i - 1][j - 1] + 1;
				} else {
					mTable[i][j] = Math.max(mTable[i][j - 1], mTable[i - 1][j]);
				}
			}
		}

		return mTable;
	}

	public static void main(String args[]) {
		LCSBottomUp ins = new LCSBottomUp("ABBA", "CACA");
		int[][] table = ins.getLCSLengthTable();
		for (int[] is : table) {
			for (int i : is) {
				System.out.print(i);
			}
			System.out.println();
		}
		System.out.println(ins.getLCSLength());
	}

}
