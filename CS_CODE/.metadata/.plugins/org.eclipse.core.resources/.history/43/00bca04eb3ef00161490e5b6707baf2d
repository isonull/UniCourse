package tick2star;

public class LCSTopDownRecursive extends LCSFinder {
	private String mRLCS = "";

	public LCSTopDownRecursive(String s1, String s2) {
		super(s1, s2);
		if (mString1 == "" || mString2 == "") {
			mTable = null;
			return;
		}
		mTable = new int[s1.length()][s2.length()];
		for (int[] is : mTable) {
			for (int i = 0; i < s2.length(); ++i) {
				is[i] = -1;
			}
		}

		LCS(mString1.length() - 1, mString2.length() - 1);
	}

	@Override
	public int getLCSLength() {
		return mTable[mString1.length() - 1][mString2.length() - 1];
	}

	@Override
	public String getLCSString() {
		String lcs = "";
		for (int i = mRLCS.length() - 1; i >= 0; --i) {
			lcs += mRLCS.charAt(i);
		}
		return lcs;
	}

	public int LCS(int end1, int end2) {
		if (end1 == -1 || end2 == -1) {
			return 0;
		}
		if (mTable[end1][end2] != -1) {
			return mTable[end1][end2];
		}

		if (mString1.charAt(end1) == mString2.charAt(end2)) {
			mRLCS += mString1.charAt(end1);
			mTable[end1][end2] = 1 + LCS(end1 - 1, end2 - 1);
			return mTable[end1][end2];
		} else {
			mTable[end1][end2] = Math.max(LCS(end1 - 1, end2), LCS(end1, end2 - 1));
			return mTable[end1][end2];
		}

	}

	@SuppressWarnings("unused")
	public static void main(String args[]) {
		LCSTopDownRecursive ins = new LCSTopDownRecursive("abba", "caca");
		System.out.println(ins.getLCSLength());
		System.out.println(ins.getLCSString());

	}
}
